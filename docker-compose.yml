version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ecommerce
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
      POSTGRES_MULTIPLE_DATABASES: users,products,orders
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh
    ports:
      - "5432:5432"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d ecommerce"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Microservices
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ecommerce
      DB_USER: admin
      DB_PASSWORD: password123
      REDIS_URL: redis://redis123@redis:6379
      JWT_SECRET: your-jwt-secret-key
      JWT_REFRESH_SECRET: your-jwt-refresh-secret-key
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8080
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network
    volumes:
      - ./services/user-service/logs:/app/logs
    restart: unless-stopped

  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      PORT: 3002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ecommerce
      DB_USER: admin
      DB_PASSWORD: password123
      REDIS_URL: redis://redis123@redis:6379
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8080
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network
    volumes:
      - ./services/product-service/logs:/app/logs
      - ./uploads:/app/uploads
    restart: unless-stopped

  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      PORT: 3003
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ecommerce
      DB_USER: admin
      DB_PASSWORD: password123
      REDIS_URL: redis://redis123@redis:6379
      USER_SERVICE_URL: http://user-service:3001
      PRODUCT_SERVICE_URL: http://product-service:3002
      STRIPE_SECRET_KEY: sk_test_your_stripe_secret_key
      STRIPE_WEBHOOK_SECRET: whsec_your_webhook_secret
      EMAIL_HOST: smtp.gmail.com
      EMAIL_PORT: 587
      EMAIL_USER: your-email@gmail.com
      EMAIL_PASS: your-app-password
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8080
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_started
      product-service:
        condition: service_started
    networks:
      - ecommerce-network
    volumes:
      - ./services/order-service/logs:/app/logs
    restart: unless-stopped

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      PORT: 3000
      REDIS_URL: redis://redis123@redis:6379
      USER_SERVICE_URL: http://user-service:3001
      PRODUCT_SERVICE_URL: http://product-service:3002
      ORDER_SERVICE_URL: http://order-service:3003
      JWT_SECRET: your-jwt-secret-key
      ALLOWED_ORIGINS: http://localhost:8080
    ports:
      - "3000:3000"
    depends_on:
      redis:
        condition: service_healthy
      user-service:
        condition: service_started
      product-service:
        condition: service_started
      order-service:
        condition: service_started
    networks:
      - ecommerce-network
    volumes:
      - ./services/api-gateway/logs:/app/logs
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ecommerce-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - ecommerce-network
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - ecommerce-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - ecommerce-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  ecommerce-network:
    driver: bridge
